# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XqGv9krRBvJscJyCKBa-tn-5Zi6Zn5qh
"""

import pandas as pd

df_link = pd.read_csv("/content/links.csv")
df_movies = pd.read_csv('/content/movies.csv')
df_rating = pd.read_csv('/content/ratings.csv')
df_tags = pd.read_csv("/content/tags.csv")

print('link: ',df_link.shape)
print('Movies: ',df_movies.shape)
print('Rating: ',df_rating.shape)
print('Tags: ',df_tags.shape)

df_rating['userId'].nunique()

merged_df = pd.merge(df_movies, df_rating, on='movieId')
filtered_df = merged_df[merged_df['title'].str.contains('Matrix|Pulp Fiction|Forrest Gump|Shawshank Redemption', case=False)]
result_df = filtered_df.groupby('title')['rating'].mean().reset_index()
result_df = result_df.sort_values(by='rating', ascending=False)
print(result_df)

merged_df = pd.merge(df_movies, df_tags, on='movieId')
filtered_df = merged_df[merged_df['title'] == 'Matrix, The (1999)']
print(filtered_df[['title', 'tag']])

merged_df = pd.merge(df_movies, df_rating, on='movieId')
filtered_df = merged_df[merged_df['title'] == 'Terminator 2: Judgment Day (1991)']
avg_rating = filtered_df['rating'].mean()
display(avg_rating)

import matplotlib.pyplot as plt


# Merge movies and ratings DataFrames
ratings_fight_club = pd.merge(df_movies, df_rating, on='movieId', how='inner')

# Filter rows for 'Fight Club (1999)'
ratings_fight_club = ratings_fight_club[ratings_fight_club['title'] == 'Fight Club (1999)']


plt.hist(ratings_fight_club['rating'], bins=10, color='blue', edgecolor='black')
plt.xlabel('User Ratings')
plt.ylabel('Frequency')
plt.title('Histogram of User Ratings for Fight Club (1999)')
plt.show()

# Calculate skewness
skewness = ratings_fight_club['rating'].skew()
print(f"Skewness: {skewness}")

grouped_ratings = df_rating.groupby("movieId").agg(
    rating_count=pd.NamedAgg(column="rating", aggfunc="count"),
    average_rating=pd.NamedAgg(column="rating", aggfunc="mean")
).reset_index()

merge_df = pd.merge(df_movies, grouped_ratings, on='movieId', how='inner')
filter_df = merge_df[merge_df['rating_count'] > 50]

top_movie = filter_df.sort_values(by='average_rating', ascending=False).head(1)
print(top_movie[['title', 'average_rating']])

top_movies_by_rating_count = filter_df.sort_values(by='rating_count', ascending=False).head(5)
print(top_movies_by_rating_count[['title', 'rating_count']])

sci_fi_movies = filter_df[filter_df['genres'].str.contains('Sci-Fi', case=False, na=False)]
top_sci_fi_movies_by_rating_count = sci_fi_movies.sort_values(by='rating_count', ascending=False).head(5)
print(top_sci_fi_movies_by_rating_count[['title', 'rating_count']])

import requests
import numpy as np
from bs4 import BeautifulSoup

def scrapper(imdbId):
    id = str(int(imdbId))
    n_zeroes = 7 - len(id)
    new_id = "0" * n_zeroes + id
    URL = f"https://www.imdb.com/title/tt{new_id}/"
    request_header = {
        'Content-Type': 'text/html; charset=UTF-8',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0',
        'Accept-Encoding': 'gzip, deflate, br'
    }
    response = requests.get(URL, headers=request_header)
    soup = BeautifulSoup(response.text, 'html.parser')
    imdb_rating_tag = soup.find('span', itemprop='ratingValue')
    return imdb_rating_tag.text if imdb_rating_tag else np.nan

top_movie_by_imdb_rating = filter_df.sort_values(by='imdb_rating').head(1)

print(top_movie_by_imdb_rating[['movieId', 'imdb_rating']])

df_link['imdb_rating'] = df_link['imdbId'].apply(scrapper)

top_movie_by_imdb_rating = filter_df.sort_values(by='imdb_rating', ascending=False).head(1)
print(top_movie_by_imdb_rating[['movieId', 'imdb_rating']])

